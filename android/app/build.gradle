def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion').toInteger()
if (flutterCompileSdkVersion == null){
    flutterCompileSdkVersion = 30
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion').toInteger()
if (flutterMinSdkVersion == null){
    flutterMinSdkVersion = 16
}
def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion').toInteger()
if (flutterMinSdkVersion == null){
    flutterMinSdkVersion = 30
}

def flutterApplicationId = localProperties.getProperty('flutter.applicationsId')
if (flutterMinSdkVersion == null){
    flutterMinSdkVersion = "net.iqbalfauzan.iimanapp"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutterCompileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId flutterApplicationId
        minSdkVersion flutterMinSdkVersion
        targetSdkVersion flutterTargetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            debuggable false
            signingConfig signingConfigs.debug
        }
        debug{
            debuggable true
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
        }
    }
    flavorDimensions "version"
    productFlavors {
        dev {
            dimension "version"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
        prod {
            dimension "version"
            applicationIdSuffix ".prod"
            versionNameSuffix "-prod"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "debug") {
                outputFileName = "iimanapp_v$flutterVersionName($flutterVersionCode)_develop.apk"
            } else {
                outputFileName = "iimanapp_v$flutterVersionName($flutterVersionCode).apk"
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
